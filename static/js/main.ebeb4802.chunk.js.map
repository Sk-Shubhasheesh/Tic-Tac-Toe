{"version":3,"sources":["logo.svg","components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","props","name","className","iteamArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeIteam","iteamNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebeb4802.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport {FaTimes, FaPen, FaRegCircle } from 'react-icons/fa';\r\n\r\nconst Icon = (props) => {\r\n   switch (props.name) {\r\n       case 'circle':\r\n           return <FaRegCircle className=\"icons\"/>;\r\n          \r\n        case 'cross':\r\n           return <FaTimes className=\"icons\"/>;\r\n          \r\n       default:\r\n           return <FaPen className=\"icons\" />;\r\n   }\r\n};\r\n\r\nexport default Icon;","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport Icon from \"./components/Icon\";\n\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {Card, CardBody, Container, Button, Col, Row} from \"reactstrap\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n\n\nconst iteamArray = new Array(9).fill(\"empty\")\n\n\n\nconst App = () => {\n  const [isCross, setIsCross] = useState(false)\n  const [winMessage, setWinMessage] = useState(\"\")\n\n  const reloadGame = () => {\n    setIsCross(false);\n    setWinMessage(\"\");\n    iteamArray.fill(\"empty\", 0, 9);\n  };\n\n  const checkIsWinner = () => {\n    if (iteamArray[0] === iteamArray[1] && \n      iteamArray[0] === iteamArray[2] &&\n      iteamArray[0] !== \"empty\") {\n        setWinMessage(`${iteamArray[0]} wins`)\n\n      } else if (\n        iteamArray[3] !== \"empty\" && \n        iteamArray[3] === iteamArray[4] &&\n        iteamArray[4] === iteamArray[5]\n      ){\n        setWinMessage(`${iteamArray[3]} wins`)\n\n\n      }else if(\n        iteamArray[6] !== \"empty\" && \n        iteamArray[6] === iteamArray[7] &&\n        iteamArray[7] === iteamArray[8]\n        \n      ){\n        setWinMessage(`${iteamArray[6]} wins`)\n\n      }else if(\n        iteamArray[0] !== \"empty\" && \n        iteamArray[0] === iteamArray[3] &&\n        iteamArray[3] === iteamArray[6]\n      ){\n        setWinMessage(`${iteamArray[0]} wins`)} else if(\n          iteamArray[1] !== \"empty\" && \n          iteamArray[1] === iteamArray[4] &&\n          iteamArray[4] === iteamArray[7]\n        ){\n          setWinMessage(`${iteamArray[1]} wins`);\n        }else if(\n          iteamArray[2] !== \"empty\" && \n          iteamArray[2] === iteamArray[5] &&\n          iteamArray[5] === iteamArray[8]\n        ){\n          setWinMessage(`${iteamArray[2]} wins`);\n        } else if(\n          iteamArray[0] !== \"empty\" && \n          iteamArray[0] === iteamArray[4] &&\n          iteamArray[4] === iteamArray[8]\n        ){\n          setWinMessage(`${iteamArray[0]} wins`);\n        } else if(\n          iteamArray[2] !== \"empty\" && \n          iteamArray[2] === iteamArray[4] &&\n          iteamArray[4] === iteamArray[6]\n        ){\n          setWinMessage(`${iteamArray[2]} wins`);\n        }\n\n  };\n\n  const changeIteam = iteamNumber => {\n    if(winMessage) {\n      return toast(winMessage, {type:\"success\" })\n    }\n\n    if(iteamArray[iteamNumber] == \"empty\") {\n      iteamArray[iteamNumber] = isCross ? \"cross\" : \"circle\"\n      setIsCross(!isCross)\n\n    }else {\n      return toast(\"already filled\", {type:\"error\"})\n    }\n    checkIsWinner();\n\n  };\n\n return (\n   <Container className=\"p-5\">\n     <ToastContainer position=\"bottom-center\" />\n     <Row>\n       <Col md={6} className=\"offset-md-3\">\n        {winMessage ? (\n          <div className=\"mb-2 mt-2\">\n          <h1 className=\"text-sucess text-uppercase text-center\">\n          {winMessage}\n          </h1>\n         <Button \n         color=\"success\"\n         block\n         onClick={reloadGame}>\n         Reload the game\n         </Button>\n\n          \n          </div>\n        ) : (\n          <h1 className=\"text-center text-warning\">\n          {isCross ? \"Cross\" : \"Circle\"} turns\n          </h1>\n        ) }\n          <div className=\"grid\">\n          {\n            iteamArray.map((item,index) => (\n             <Card color=\"warning\" onClick={ () => changeIteam(index)}>\n             <CardBody className=\"box\">\n               <Icon name={item} />\n             </CardBody>\n             </Card> \n            )\n\n            )\n          }\n          \n          </div>\n       </Col>\n     </Row>\n   </Container>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}